import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Play, Pause, Trash2, Bell, BellOff, Clock, FileText, ChevronDown, ChevronUp } from "lucide-react";
import { format } from "date-fns";

export default function NoteCard({ note, index, onDelete, onSetReminder, onToggleReminder }) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [audioElement, setAudioElement] = useState(null);
  const [showTranscript, setShowTranscript] = useState(false);

  const handlePlayPause = () => {
    if (!audioElement) {
      const audio = new Audio(note.audio_url);
      audio.onended = () => setIsPlaying(false);
      setAudioElement(audio);
      audio.play();
      setIsPlaying(true);
    } else {
      if (isPlaying) {
        audioElement.pause();
        setIsPlaying(false);
      } else {
        audioElement.play();
        setIsPlaying(true);
      }
    }
  };

  const formatDuration = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, x: -100 }}
      transition={{ delay: index * 0.05 }}
    >
      <Card className="p-4 bg-white/80 backdrop-blur-sm border-2 border-indigo-100 hover:border-indigo-200 rounded-2xl shadow-md hover:shadow-xl transition-all duration-300">
        <div className="flex items-start gap-4">
          {/* Play Button */}
          <Button
            onClick={handlePlayPause}
            className={`w-14 h-14 rounded-full flex-shrink-0 shadow-lg transition-all duration-300 ${
              isPlaying
                ? "bg-gradient-to-br from-pink-500 to-rose-600 hover:from-pink-600 hover:to-rose-700 animate-pulse"
                : "bg-gradient-to-br from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700"
            }`}
          >
            {isPlaying ? (
              <Pause className="w-6 h-6 text-white" />
            ) : (
              <Play className="w-6 h-6 text-white ml-1" />
            )}
          </Button>

          {/* Content */}
          <div className="flex-1 min-w-0">
            <h3 className="font-semibold text-gray-800 mb-1 truncate">
              {note.title}
            </h3>
            {note.description && (
              <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                {note.description}
              </p>
            )}
            
            {/* Transcript Toggle */}
            {note.transcript && (
              <div className="mt-2">
                <Button
                  onClick={() => setShowTranscript(!showTranscript)}
                  variant="ghost"
                  size="sm"
                  className="h-auto py-1 px-2 text-xs text-indigo-600 hover:text-indigo-700 hover:bg-indigo-50"
                >
                  <FileText className="w-3 h-3 mr-1" />
                  {showTranscript ? "Hide" : "Show"} Transcript
                  {showTranscript ? (
                    <ChevronUp className="w-3 h-3 ml-1" />
                  ) : (
                    <ChevronDown className="w-3 h-3 ml-1" />
                  )}
                </Button>
                
                {showTranscript && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="mt-2 p-3 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-100 rounded-xl"
                  >
                    <p className="text-sm text-gray-700 whitespace-pre-wrap">
                      {note.transcript}
                    </p>
                  </motion.div>
                )}
              </div>
            )}

            <div className="flex items-center gap-3 text-xs text-gray-500 mt-2">
              <span className="flex items-center gap-1">
                <Clock className="w-3 h-3" />
                {note.duration ? formatDuration(note.duration) : "0:00"}
              </span>
              <span>â€¢</span>
              <span>{format(new Date(note.created_date), "MMM d, h:mm a")}</span>
            </div>
            
            {/* Reminder Info */}
            {note.is_reminder_active && note.reminder_time && (
              <div className="mt-2 inline-flex items-center gap-1 px-2 py-1 bg-gradient-to-r from-amber-100 to-orange-100 text-amber-700 rounded-full text-xs font-medium">
                <Bell className="w-3 h-3" />
                {format(new Date(note.reminder_time), "MMM d, h:mm a")}
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col gap-2">
            <Button
              onClick={note.is_reminder_active ? onToggleReminder : onSetReminder}
              variant="ghost"
              size="icon"
              className={`w-10 h-10 rounded-xl ${
                note.is_reminder_active
                  ? "bg-amber-100 text-amber-600 hover:bg-amber-200"
                  : "hover:bg-indigo-50 text-gray-400 hover:text-indigo-600"
              }`}
            >
              {note.is_reminder_active ? (
                <Bell className="w-4 h-4" />
              ) : (
                <BellOff className="w-4 h-4" />
              )}
            </Button>
            <Button
              onClick={onDelete}
              variant="ghost"
              size="icon"
              className="w-10 h-10 rounded-xl hover:bg-red-50 text-gray-400 hover:text-red-600"
            >
              <Trash2 className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </Card>
    </motion.div>
  );
}
